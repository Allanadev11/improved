// Arithmetic Logic Unit (ALU)
module ALU (
    input [31:0] A, B,
    input [3:0] ALUOp,
    output reg [31:0] Result,
    output reg Zero
);
    always @(*) begin
        case (ALUOp)
            4'b0000: Result = A + B; // ADD
            4'b0001: Result = A - B; // SUB
            4'b0010: Result = A & B; // AND
            4'b0011: Result = A | B; // OR
            4'b0100: Result = A ^ B; // XOR
            4'b0101: Result = A << B; // SLL
            4'b0110: Result = A >> B; // SRL
            4'b0111: Result = $signed(A) >>> B; // SRA
            4'b1000: Result = (A < B) ? 1 : 0; // SLT
            default: Result = 32'b0; // Default
        endcase
        Zero = (Result == 32'b0) ? 1'b1 : 1'b0;
    end
endmodule
// register file 
module RegisterFile (
    input clk,
    input regWrite,
    input [4:0] readReg1, readReg2, writeReg,
    input [31:0] writeData,
    output [31:0] readData1, readData2
);
    reg [31:0] registers [31:0];

    always @(posedge clk) begin
        if (regWrite) begin
            registers[writeReg] <= writeData;
        end
    end

    assign readData1 = registers[readReg1];
    assign readData2 = registers[readReg2];
endmodule
// control unit 
module ControlUnit (
    input [5:0] opcode,
    output reg [3:0] ALUOp,
    output reg regDst, regWrite, ALUSrc, memRead, memWrite, memToReg, branch
);
    always @(*) begin
        case (opcode)
            6'b000000: begin // R-type
                regDst = 1;
                regWrite = 1;
                ALUSrc = 0;
                ALUOp = 4'b0000; // ADD
                memRead = 0;
                memWrite = 0;
                memToReg = 0;
                branch = 0;
            end
            6'b100011: begin // LW
                regDst = 0;
                regWrite = 1;
                ALUSrc = 1;
                ALUOp = 4'b0000; // ADD for address calculation
                memRead = 1;
                memWrite = 0;
                memToReg = 1;
                branch = 0;
            end
            6'b101011: begin // SW
                regDst = 0;
                regWrite = 0;
                ALUSrc = 1;
                ALUOp = 4'b0000; // ADD for address calculation
                memRead = 0;
                memWrite = 1;
                memToReg = 0;
                branch = 0;
            end
            6'b000100: begin // BEQ
                regDst = 0;
                regWrite = 0;
                ALUSrc = 0;
                ALUOp = 4'b0001; // SUB
                memRead = 0;
                memWrite = 0;
                memToReg = 0;
                branch = 1;
            end
            default: begin // Default
                regDst = 0;
                regWrite = 0;
                ALUSrc = 0;
                ALUOp = 4'b0000;
                memRead = 0;
                memWrite = 0;
                memToReg = 0;
                branch = 0;
            end
        endcase
    end
endmodule
// Simple MIPS Processor Integration
module MIPSProcessor (
    input clk,
    input [31:0] instruction,
    output [31:0] pcOut, aluResult
);
    wire [31:0] readData1, readData2, signExtImm, aluInput2, memData, writeData;
    wire [3:0] ALUOp;
    wire regDst, regWrite, ALUSrc, memRead, memWrite, memToReg, branch, zero;
    wire [4:0] writeReg;

    ControlUnit CU(
        .opcode(instruction[31:26]),
        .ALUOp(ALUOp),
        .regDst(regDst),
        .regWrite(regWrite),
        .ALUSrc(ALUSrc),
        .memRead(memRead),
        .memWrite(memWrite),
        .memToReg(memToReg),
        .branch(branch)
    );

    RegisterFile RF(
        .clk(clk),
        .regWrite(regWrite),
        .readReg1(instruction[25:21]),
        .readReg2(instruction[20:16]),
        .writeReg(writeReg),
        .writeData(writeData),
        .readData1(readData1),
        .readData2(readData2)
    );

    assign signExtImm = {{16{instruction[15]}}, instruction[15:0]};
    assign aluInput2 = ALUSrc ? signExtImm : readData2;

    ALU ALU(
        .A(readData1),
        .B(aluInput2),
        .ALUOp(ALUOp),
        .Result(aluResult),
        .Zero(zero)
    );

    assign writeReg = regDst ? instruction[15:11] : instruction[20:16];
    assign writeData = memToReg ? memData : aluResult;
    
    // Assuming the existence of a memory module for LW/SW
    // Memory MemModule(
    //     .clk(clk),
    //     .address(aluResult),
    //     .writeData(readData2),
    //     .memWrite(memWrite),
    //     .memRead(memRead),
    //     .readData(memData)
    // );

    // Program Counter and other logic would go here
    // assign pcOut = ...;

endmodule

